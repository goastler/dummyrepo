name: release

on:
    push:
        branches: # on push to these branches
            - main
            - build/*
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: false # queue the new runs until previous have finished. This avoids version bumps overlapping with each other

defaults:
    run:
        shell: bash

jobs:
    release:
        name: release
        runs-on: ubuntu-latest
        steps:
            - name: Print contexts
              uses: prosopo/captcha/.github/actions/print_contexts@gha
              with:
                    INPUTS_CONTEXT: ${{ toJson(inputs) }}
                    NEEDS_CONTEXT: ${{ toJson(needs) }}
                    VARS_CONTEXT: ${{ toJson(vars) }}
                    SECRETS_CONTEXT: ${{ toJson(secrets) }}

            - name: Get token for gh app token
              id: app_token
              uses: peter-murray/workflow-application-token-action@v3
              with:
                application_id: ${{ vars.PROSOPONATOR_APP_ID }}
                application_private_key: ${{ secrets.PROSOPONATOR_APP_PRIVATE_KEY }}

            - uses: actions/checkout@v4
              with:
                  submodules: 'recursive'
                  token: ${{ steps.app_token.outputs.token }}
                  fetch-depth: 0 # fetch all history

            - name: setup npm registry
              run: |
                set -x
                echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
                echo "//npm.pkg.github.com/:_authToken=${{ secrets.PROSOPONATOR_PAT }}" >> ~/.npmrc

            - name: authenticate npm registry
              run: |
                set -x
                npm whoami --registry https://registry.npmjs.org/

            - name: authenticate gh registry
              run: |
                set -x
                npm whoami --registry https://npm.pkg.github.com/

            - name: Export vars to env
              run: |
                echo '${{ toJson(vars) }}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV

            - name: git config
              run: |
                set -x
                git config user.name "prosoponator[bot]"
                git config user.email "dev@prosopo.io"

            - run: npm ci

            - name: version
              run: |
                npx @changesets/cli version --verbose
                git status
                git add -u .
                git commit -m "chore: version bump" || true # allow the commit to fail if there are no changes to commit
                git status

            - name: affected
              run: |
                affected=$(npx nx show projects --json --affected --base=${{ github.sha }} --head=HEAD)
                echo "affected: $affected"
                echo "affected=$affected" >> $GITHUB_ENV
              
            - name: build+bundle
              run: |
                echo "Building and bundling affected packages"
                npx nx run-many --target=bundle --projects=$(echo $affected | jq -r 'keys | join(",")')

            - name: push
              env:
                GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
              run: |
                git push --follow-tags || true # allow the push to fail if there are no changes to push

            - name: publish
              id: publish
              run: |
                # for each affected package
                output="[]"
                for pkg in $(echo '${{ env.affected }}' | jq -r '.[]'); do
                    # skip the workspace root
                    if [ "$pkg" == "$(cat package.json | jq -r '.name')" ]; then
                        echo "Skipping workspace root package"
                        continue
                    fi

                    echo "Publishing $pkg to npm"
                    set +e
                    npm publish -w "$pkg" --access public --registry https://registry.npmjs.org
                    result_npm=$?
                    set -e
                    echo

                    echo "Publishing $pkg to gh"
                    # make the package non-private so it can be published to gh
                    npm pkg --workspace $pkg delete private
                    set +e
                    npm publish -w "$pkg" --access public --registry https://npm.pkg.github.com
                    result_gh=$?
                    set -e
                    echo

                    output=$(echo "$output" | jq -c ". += [{\"package\": \"$pkg\", \"npm\": $result_npm, \"gh\": $result_gh}]")
                done

                echo "output: $output"
                echo "output=$output" >> $GITHUB_OUTPUT

                failed=$(echo "$output" | jq '[.[] | select((.npm!=0) or (.gh!=0))] | length')
                if [ "$failed" -gt 0 ]; then
                    echo "Some packages failed to publish to GitHub Packages"
                    exit 1
                fi
