name: release

on:
    push:
        branches: # on push to these branches
            - main
            - build/*
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: false # queue the new runs until previous have finished. This avoids version bumps overlapping with each other

defaults:
    run:
        shell: bash

jobs:
    release:
        name: release
        runs-on: ubuntu-latest
        steps:
            - name: Print contexts
              uses: prosopo/captcha/.github/actions/print_contexts@gha
              with:
                    INPUTS_CONTEXT: ${{ toJson(inputs) }}
                    NEEDS_CONTEXT: ${{ toJson(needs) }}
                    VARS_CONTEXT: ${{ toJson(vars) }}
                    SECRETS_CONTEXT: ${{ toJson(secrets) }}

            - name: Get token for gh app token
              id: app_token
              uses: peter-murray/workflow-application-token-action@v3
              with:
                application_id: ${{ vars.PROSOPONATOR_APP_ID }}
                application_private_key: ${{ secrets.PROSOPONATOR_APP_PRIVATE_KEY }}

            - uses: actions/checkout@v4
              with:
                  submodules: 'recursive'
                  token: ${{ steps.app_token.outputs.token }}
                  fetch-depth: 0 # fetch all history

            - name: setup npm registry
              run: |
                set -x
                echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
                echo "//npm.pkg.github.com/:_authToken=${{ secrets.PROSOPONATOR_PAT }}" >> ~/.npmrc

            - name: authenticate npm registry
              run: |
                set -x
                npm whoami --registry https://registry.npmjs.org/

            # - name: authenticate gh registry
            #   run: |
            #     set -x
            #     npm whoami --registry https://npm.pkg.github.com/

            # - name: Authenticate GitHub CLI
            #   run: echo "${{ secrets.PROSOPONATOR_PAT }}" | gh auth login --with-token

            - name: git config
              run: |
                set -x
                git config user.name "prosoponator[bot]"
                git config user.email "dev@prosopo.io"

            - run: npm ci

            - name: Apply version bumps
              env: 
                GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
              run: |
                # if there are changesets, apply them
                if find .nx/version-plans -type f -print -quit | grep -q .; then
                  echo "Found changeset files"
                  npx nx release --first-release
                  # nx doesn't update the pkg lock properly so do it manually
                  npm i
                  git add package-lock.json
                  git commit --amend --no-edit
                  git status
                  git push
                  git push --tags
                else
                  echo "No changeset files found"
                fi

            - name: affected
              run: |
                affected=$(npx nx show projects --json --affected --base=${{ github.sha }} --head=HEAD)
                echo "affected: $affected"
                echo "affected=$affected" >> $GITHUB_ENV

            - name: publish to npm
              id: publish_npm
              run: |
                # for each affected package
                output="[]"
                for pkg in $(echo $affected | jq -r '.[]'); do
                    echo "Publishing $pkg"
                    set +e
                    npm publish -w "$pkg" --access public --registry https://registry.npmjs.org
                    result=$?
                    set -e
                    if [ $result -eq 0 ]; then
                      output=$(echo "$output" | jq -c ". += [{\"package\": \"$pkg\", \"ok\": true}]")
                                        else
                      output=$(echo "$output" | jq -c ". += [{\"package\": \"$pkg\", \"ok\": false}]")
                    fi
                done

                echo "output: $output"
                echo "output=$output" >> $GITHUB_OUTPUT

            - name: publish to gh
              id: publish_gh
              run: |
                # make all packages non-private - this just means we can publish them, not that they're public!
                npm pkg -ws delete private
                # for each affected package
                output="[]"
                for pkg in $(echo $affected | jq -r '.[]'); do
                    echo "Publishing $pkg"
                    # restricted access for private packages on gh (only accessible to the org)
                    set +e
                    npm publish -w "$pkg" --access restricted --registry https://npm.pkg.github.com
                    result=$?
                    set -e
                    if [ $result -eq 0 ]; then
                      output=$(echo "$output" | jq -c ". += [{\"package\": \"$pkg\", \"ok\": true}]")
                    else
                      output=$(echo "$output" | jq -c ". += [{\"package\": \"$pkg\", \"ok\": false}]")
                    fi
                done

                echo "output: $output"
                echo "output=$output" >> $GITHUB_OUTPUT

            - name: print output
              run: |
                echo "output: ${{ steps.publish_npm.outputs.output }}"
                echo "output: ${{ steps.publish_gh.outputs.output }}"
                npm_failed=$(echo '${{ steps.publish_npm.outputs.output }}' | jq '[.[] | select(.ok==false)] | length')
                gh_failed=$(echo '${{ steps.publish_gh.outputs.output }}' | jq '[.[] | select(.ok==false)] | length')
                if [ "$npm_failed" -gt 0 ] || [ "$gh_failed" -gt 0 ]; then
                  echo "One or more packages failed to publish."
                  exit 1
                fi

            # - name: push changesets
            #   run: |
            #     set -x
            #     git add .
            #     git commit -m "chore: version bump"
            #     git push

            # - run: |
            #     npx nx release publish --yes --access public --first-release --registry https://registry.npmjs.org

            # - name: push
            #   env: 
            #     GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
            #   run: |
            #     set -x
            #     git add .
            #     git commit -m "chore: version bump"
            #     git push

            # - name: publish npm
            #   run: |
            #     npx nx release publish --registry https://registry.npmjs.org --first-release

            # - name: publish gh
            #   run: |
            #     npx nx release publish --registry https://npm.github.com --first-release

