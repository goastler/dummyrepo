name: release

on:
  push:
    branches:
      - main

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  a:
    runs-on: ubuntu-latest
    steps:
      - name: git author
        run: |
        
          git config --global user.email "goastler4@gmail.com"
          git config --global user.name "goastler"

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.KEY }}

      - run: npm ci

      - name: tag
        run: |
          
          # for each package, try to push a tag for the current version
          pkgs=$(npm run --workspaces env | grep npm_package_name | cut -d '=' -f 2)
          json='[]'
          for pkg in $pkgs; do
            version=$(npx -w $pkg node -e 'console.log(require("./package.json").version)')
            tag="$pkg@$version"
            if [[ "$pkg" != "$(cat package.json | jq '.name')" ]]; then
              echo "Creating tag $tag"
              git tag -a "$tag" -m "chore: release $tag"
              if [ $? -ne 0 ]; then
                echo "Tag $tag already exists"
                continue
              fi
              echo "Created tag $tag"
              echo '----'
            fi
            json=$(echo $json | jq ". + [{\"name\": \"$pkg\", \"version\": \"$version\"}]")
          done

          echo "Affected: $json"

          echo "$json" > affected.json

          json=$(echo $json | jq -c ".")

          echo "AFFECTED=$json" >> $GITHUB_ENV

      - name: build
        run: |

          # for each package in AFFECTED
          for pkg in $(echo $AFFECTED | jq -r '.[].name'); do
            echo "Building package $pkg"
            npm run build -w $pkg --if-present
          done

      - name: gh release
        run: |

          # do a release for the workspace
          version=$(cat package.json | jq -r ".version")
          name=$(cat package.json | jq -r ".name")
          tag="$name@$version"
          gh release create --generate-notes "$tag"
          gh release upload "$tag" affected.json

      - name: push tags
        run: |
          # build and release successful, so push all tags

          # for each package in AFFECTED
          for pkg in $(echo $AFFECTED | jq -r '.[].name'); do
            # push the tag
            version=$(echo $AFFECTED | jq -r ".[] | select(.name == \"$pkg\") | .version")
            tag="$pkg@$version"
            echo "Pushing tag $tag"
            git push origin "$tag"
            echo '----'
          done

      - name: publish
        run: |
          # login to the registry
          registry="npm.pkg.github.com"
          echo "//$registry/:_authToken=${{ secrets.GH_PAT }}" >> .npmrc
          # for each affected pkg, get the pkg name and version
          for pkg in $(echo $AFFECTED | jq -r '.[].name'); do
            pth="$(npx -w "$pkg" node -e 'console.log(process.cwd())')"
            npm pkg -w "$pkg" set repository.type=git
            npm pkg -w "$pkg" set repository.url="git+https://github.com/${{ github.repository }}.git"
            npm pkg -w "$pkg" set repository.directory="$pth"
            # publish the pkg
            version=$(echo $AFFECTED | jq -r ".[] | select(.name == \"$pkg\") | .version")
            echo "Publishing package $pkg at version $version"
            npm publish -w "$pkg" --registry "https://$registry"
            echo '----'
          done

