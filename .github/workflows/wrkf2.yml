name: workflow2

on:
  workflow_run:
    workflows: ["workflow1"]
    types:
      - completed

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - run: mkdir -p docker_image_cache
      
      - name: docker image cache
        id: docker_image_cache
        uses: actions/cache@v3
        with:
          path: docker_image_cache
          key: docker_image_cache_${{ runner.os }}_${{ runner.arch }}
          restore-keys: |
            docker_image_cache_${{ runner.os }}_${{ runner.arch }}-

      # load imgs from cache
      - name: Load images
        id: load_images
        run: |
          ls docker_image_cache
          docker load -i docker_image_cache/contracts-ci-linux.tar || true

      # update the img
      - name: Docker pull
        id: docker_pull
        run: |
          before=$(docker image list -q)
          docker pull paritytech/contracts-ci-linux:latest
          after=$(docker image list -q)
          if [[ "$before" == "$after" ]]; then
            echo "change=false" >> "$GITHUB_OUTPUT"
          else
            echo "change=true" >> "$GITHUB_OUTPUT"
          fi

      # save the cache
      - name: Tar images
        if: steps.docker_pull.outputs.change == 'true'
        run: |
          docker save -o docker_image_cache/contracts-ci-linux.tar paritytech/contracts-ci-linux:latest

      - name: Save images to cache
        if: steps.docker_pull.outputs.change == 'true'
        uses: actions/cache/save@v3
        with:
          path: docker_image_cache
          key: docker_image_cache_${{ runner.os }}_${{ runner.arch }}_${{ github.run_id }}_${{ github.run_attempt }}

      - name: Cleanup caches
        if: steps.docker_pull.outputs.change == 'true'
        run: |
          set +e; gh extension install actions/gh-actions-cache; set -e
          REPO=${{ github.repository }}
          echo "Fetching list of cache key"
          # get all but the most recent cache
          cacheKeysForPR=$(gh actions-cache list --sort created-at --order desc --limit 100 -R $REPO --key docker_image_cache_${{ runner.os }}_${{ runner.arch }}- | cut -f 1 | tail -n +2 )
          echo caches to be removed:
          echo ${cacheKeysForPR}
          # delete the stale caches
          ## Setting this to not fail the workflow while deleting cache keys. 
          set +e
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey -R $REPO --confirm
          done