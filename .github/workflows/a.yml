name: a

on:
  push:
    branches:
      - main

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  a:
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/print_contexts
        with:
          - SECRET_CONTEXT: ${{ toJson(secrets) }}
          - VARS_CONTEXT: ${{ toJson(vars) }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - run: git fetch origin ${{ github.event.before }}

      - name: git author
        run: |
          git config --global user.email "goastler4@gmail.com"
          git config --global user.name "goastler"

      - run: npm ci

      - name: version
        run: |
          npx nx release version

      # - name: remove version plans
      #   run: |
      #     rm -rfv .nx/version-plans

      - name: commit
        run: |

          # apply the version
          git config --global user.email "goastler4@gmail.com"
          git config --global user.name "goastler"

          git add .

          git diff --cached

          if git diff --cached --quiet; then
            echo "No changes to commit"

            exit 0
          fi

          git commit -m "chore: release version"

      - name: affected
        run: |

          # HEAD is the latest commit and contains the version bumps
          pkgs=$(npx nx show projects --affected --base ${{ github.event.before }} --head HEAD)
          echo "Affected packages: $pkgs"

          json="[]"
          # for each package, find the current version from the package.json
          for pkg in $pkgs; do
          pth="$(npx -w "$pkg" node -e 'console.log(process.cwd())')/package.json"
          echo "Checking package $pkg at path $pth"
          version=$(jq -r ".version" "$pth")
          echo "Package $pkg is currently at version $version"
          json=$(echo $json | jq ". + [{\"name\": \"$pkg\", \"version\": \"$version\"}]")
          done
          # reverse order to release most dependent package last
          json=$(echo $json | jq "reverse")

          echo "Affected: $json"

          echo "$json" > affected.json

          json=$(echo $json | jq -c ".")

          echo "AFFECTED=$json" >> $GITHUB_ENV

      - name: build
        run: |

          # for each package in AFFECTED
          for pkg in $(echo $AFFECTED | jq -r '.[].name'); do
            echo "Building package $pkg"
            npm run build -w $pkg --if-present
          done

      - name: push changes
        run: |
          git push

      - name: gh release
        run: |

          # do a release for the workspace
          version=$(cat package.json | jq -r ".version")
          tag="v$version"
          gh release create --generate-notes "$tag"
          gh release upload "$tag" affected.json

      - name: tag packages
        env:
          GH_TOKEN: ${{ github.token }}
        run: |

          # for each affected pkg, get the pkg name and version
          for pkg in $(echo $AFFECTED | jq -r '.[].name'); do
            # tag the pkg
            version=$(echo $AFFECTED | jq -r ".[] | select(.name == \"$pkg\") | .version")
            tag="$pkg@$version"
            echo "Creating tag $tag"
            git tag -a "$tag" -m "chore: release $tag"
            git push origin "$tag"
            echo ''
          done

      - name: publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |

          # for each affected pkg, get the pkg name and version
          for pkg in $(echo $AFFECTED | jq -r '.[].name'); do
            # publish the pkg
            version=$(echo $AFFECTED | jq -r ".[] | select(.name == \"$pkg\") | .version")
            echo "Publishing package $pkg at version $version"
            npm publish -w "$pkg" --registry https://npm.pkg.github.com
            echo ''
          done
