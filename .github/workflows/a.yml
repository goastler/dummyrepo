name: a

on:
  push:
    branches:
      - main

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  a:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.KEY }}

      - run: git fetch origin ${{ github.event.before }}

      - name: git author
        run: |
          git config --global user.email "goastler4@gmail.com"
          git config --global user.name "goastler"

      - run: npm ci

      - name: version
        run: |
          npx nx release version

      - name: remove version plans
        run: |
          rm -rfv .nx/version-plans

      - run: npm i

      # - run: sudo apt update && sudo apt install -y uuid

      - name: commit
        run: |
          git config --global user.email "goastler4@gmail.com"
          git config --global user.name "goastler"

          git add .

          git diff --cached

          if git diff --cached --quiet; then
            echo "No changes to commit"

            exit 0
          fi

          git commit -m "chore: release version"
          git push

      - name: affected
        run: |
          # HEAD is the latest commit and contains the version bumps
          pkgs=$(npx nx show projects --affected --base ${{ github.event.before }} --head HEAD)
          echo "Affected packages: $pkgs"

          json="[]"
          # for each package, find the current version from the package.json
          for pkg in $pkgs; do
            pth="$(npx -w "$pkg" node -e 'console.log(process.cwd())')/package.json"
            echo "Checking package $pkg at path $pth"
            version=$(jq -r ".version" "$pth")
            echo "Package $pkg is currently at version $version"
            json=$(echo $json | jq ". + [{\"name\": \"$pkg\", \"version\": \"$version\"}]")
          done
          # reverse order to release most dependent package last
          json=$(echo $json | jq "reverse")

          echo "Affected: $json"

          echo "$json" > affected.json

          json=$(echo $json | jq -c ".")

          echo "AFFECTED=$json" >> $GITHUB_ENV

      - name: build
        run: |
          # for each package in AFFECTED
          for pkg in $(echo $AFFECTED | jq -r '.[].name'); do
            echo "Building package $pkg"
            npm run build -w $pkg --if-present
          done

      - name: release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # for entries in AFFECTED
          for tag in $(echo $AFFECTED | jq -r '.[] | .name + "@v" + .version'); do
            echo "Releasing package $tag"
            gh release create "$tag" --title "$tag" --generate-notes
          done
