name: uvw

on:
    pull_request:

jobs:
    uvw:
        runs-on: ubuntu-latest
        steps:
            - name: Print contexts
              env:
                  GITHUB_CONTEXT: ${{ toJson(github) }}
                  ENV_CONTEXT: ${{ toJson(env) }}
                  VARS_CONTEXT: ${{ toJson(vars) }}
                  JOB_CONTEXT: ${{ toJson(job) }}
                  STEPS_CONTEXT: ${{ toJson(steps) }}
                  RUNNER_CONTEXT: ${{ toJson(runner) }}
                  SECRETS_CONTEXT: ${{ toJson(secrets) }}
                  STRATEGY_CONTEXT: ${{ toJson(strategy) }}
                  MATRIX_CONTEXT: ${{ toJson(matrix) }}
                  NEEDS_CONTEXT: ${{ toJson(needs) }}
                  INPUTS_CONTEXT: ${{ toJson(inputs) }}
              run: |
                  echo "******************************"
                  echo "github:" "$GITHUB_CONTEXT"
                  echo "******************************"
                  echo "env:" "$ENV_CONTEXT"
                  echo "******************************"
                  echo "vars:" "$VARS_CONTEXT"
                  echo "******************************"
                  echo "job:" "$JOB_CONTEXT"
                  echo "******************************"
                  echo "steps:" "$STEPS_CONTEXT"
                  echo "******************************"
                  echo "runner:" "$RUNNER_CONTEXT"
                  echo "******************************"
                  echo "secrets:" "$SECRETS_CONTEXT"
                  echo "******************************"
                  echo "strategy:" "$STRATEGY_CONTEXT"
                  echo "******************************"
                  echo "matrix:" "$MATRIX_CONTEXT"
                  echo "******************************"
                  echo "needs:" "$NEEDS_CONTEXT"
                  echo "******************************"
                  echo "inputs:" "$INPUTS_CONTEXT"
                  echo "******************************"
            - uses: actions/checkout@v3
            - name: Detect version bump
              id: detect_version_bump
              run: |
                  # if run from workflow_dispatch, then skip this step
                  if [[ "${{ github.event_name }}" == 'workflow_dispatch' ]]; then
                    echo "Skipping version bump detection"
                    # assume there has been a version bump, as this is a manual run
                    echo "bump=true" >> $GITHUB_OUTPUT
                    exit 0
                  fi

                  # get the version line changes
                  echo "before: ${{github.event.before}}"
                  echo "after: ${{github.event.after}}"
                  LINES=$(git show --pretty=format: --no-notes ${{github.event.before}}..HEAD package.json | grep -e "[-\+]\s*\"version\"")
                  echo "$LINES"

                  # if there's lines returned, then the version line has changed. The lines will look like:
                  # -    "version": "0.2.24",
                  # +    "version": "0.2.25",
                  # -    "version": "0.2.23",
                  # +    "version": "0.2.24",
                  # note there may be multiple changes if the version line has been changed multiple times. - == removed, + == added
                  # use wc to count the lines
                  N_LINES=$(echo "$LINES" | wc -l)
                  # if there are any lines, then there has been a change in the version
                  if [[ "$N_LINES" -gt 0 ]]; then
                    echo "bump=true" >> $GITHUB_OUTPUT
                    echo "version bump detected"
                  else
                    echo "bump=false" >> $GITHUB_OUTPUT
                    echo "no version bump detected"
                  fi
                